class Solution {
public:
    
    /*
    首先注意这道题要用双指针，其中每次只动指向更矮柱子的指针
    记录下找到的最大水容积，当2个指针相撞以后返回找到的最大容积。
    
    这里面的关键细节在于木桶效应，2个柱子围起来的水桶，水面取决于最矮的柱子。
    
    因此，我们双指针下的水箱容积公式是：min(height[lP],height[rP]) * width
    如果我们动了指向更高柱子的指针，可以想象一下，如果我们找到了更加高的，水面仍然取决于更矮的柱子。
    如果我们找到了更加矮的，水面下降了，因此，如果我们动更高柱子的指针，由于被更矮柱子限制，不论我们怎么动，都只能找到容积更小的结果。
    
    尽管证明了我们动更高的指针没有意义，但这似乎并不能证明为什么动更矮的指针一定是正确的。
    但是我们可以换一个思路想，这道题本来的组合空间有N^2那么大，因为我们排除了其中一种动作（动高的）
    这刚好导致可能的组合空间下降到了只有N那么多。 因为排除动作实际上对组合空间做了一个差集。
    */
    int maxArea(vector<int>& height) {
        int lP = 0, rP = height.size() - 1;
        int maxVol = 0;
        while(lP < rP)
        {
            maxVol = max(maxVol,min(height[lP],height[rP]) * (rP - lP));
            if(height[lP] > height[rP])//这边大动另一边的
                --rP;
            else
                ++lP;
        }
        return maxVol;
    }
};